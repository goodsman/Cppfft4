segments(Svec2[10],Bvec2[10],Svec2[10]-30, Bvec2[10]-1200, col = 'red', lwd = 2)
segments(Svec2[10],Bvec2[10],Svec2[10]+60, Bvec2[10]-800, col = 'red', lwd = 2)
# Third sim
segments(Svec3[5],Bvec3[5],Svec3[5]-50, Bvec3[5]+1500, col = 'red', lwd = 2)
segments(Svec3[5],Bvec3[5],Svec3[5]+50, Bvec3[5]+1500, col = 'red', lwd = 2)
# Fourth sim
segments(Svec4[2],Bvec4[2],Svec4[2]-50, Bvec4[2]+1500, col = 'red', lwd = 2)
segments(Svec4[2],Bvec4[2],Svec4[2]+50, Bvec4[2]+1500, col = 'red', lwd = 2)
# Fifth sim
segments(Svec5[8],Bvec5[8],Svec5[8]-30, Bvec5[8]-1200, col = 'red', lwd = 2)
segments(Svec5[8],Bvec5[8],Svec5[8]+60, Bvec5[8]-800, col = 'red', lwd = 2)
# Sixth sim
segments(Svec6[4],Bvec6[4],Svec6[4]-50, Bvec6[4]+1500, col = 'red', lwd = 2)
segments(Svec6[4],Bvec6[4],Svec6[4]+50, Bvec6[4]+1500, col = 'red', lwd = 2)
# Sevent sim
segments(Svec7[3],Bvec7[3],Svec7[3]-50, Bvec7[3]+1500, col = 'red', lwd = 2)
segments(Svec7[3],Bvec7[3],Svec7[3]+50, Bvec7[3]+1500, col = 'red', lwd = 2)
# Eighth sim
segments(Svec8[8],Bvec8[8],Svec8[8]-30, Bvec8[8]-1200, col = 'red', lwd = 2)
segments(Svec8[8],Bvec8[8],Svec8[8]+60, Bvec8[8]-800, col = 'red', lwd = 2)
# Ninth sim
segments(Svec9[4],Bvec9[4],Svec9[4]-50, Bvec9[4]+1500, col = 'red', lwd = 2)
segments(Svec9[4],Bvec9[4],Svec9[4]+50, Bvec9[4]+1500, col = 'red', lwd = 2)
# Along the line
segments(500, 6.498507*500, 500+50, 6.498507*500+1500, col = 'red', lwd = 2)
segments(500, 6.498507*500, 500+80, 6.498507*500-500, col = 'red', lwd = 2)
segments(1500, 6.498507*1500, 1500+50, 6.498507*1500+1500, col = 'red', lwd = 2)
segments(1500, 6.498507*1500, 1500+80, 6.498507*1500-500, col = 'red', lwd = 2)
segments(2500, 6.498507*2500, 2500+50, 6.498507*2500+1500, col = 'red', lwd = 2)
segments(2500, 6.498507*2500, 2500+80, 6.498507*2500-500, col = 'red', lwd = 2)
legend(500,33000, lwd = 2, lty = c(1,2), col = "black",
c("Stable", "Unstable"), bty = 'n')
graphics.off()
windows(width = 3, height = 6)
par(mar = c(3,3,1,1), mfrow = c(3,1), oma = c(1,1,0.5,0.5))
plot(Rtp1 ~ Rt, type = 'l', lwd = 2, xlim = c(0,15), ylim = c(0,15), axes = F, ann = F)
lines (Y1 ~ Rt, lwd = 2, lty = 1, col = "grey")
lines(Rtp2 ~ Rt, lwd = 2, lty = 2, col = "red")
lines(Rtp3 ~ Rt, lwd = 2, lty = 3, col = "blue")
axis(1, at = seq(0,15,by=5), lwd = 2)
mtext(side = 1, expression('Z'[t]), line = 2)
axis(2, at = seq(0,15,by=5), lwd = 2, las = 2)
mtext(side = 2, expression('Z '[t+1]), line = 2)
text(0.1,15,"A)")
legend(1,16.5, lwd = 2, lty = c(1,2,3), col = c("black", "red", "blue"),
c("r-value = 1.33", "r-value = 5.32", "r-value = 6.65"), bty = 'n')
plot(RootMat[1786:9001,4] ~ RootMat[1786:9001,2], type = 'l',
lwd =2, lty = 2, xlim = c(4,6), ylim = c(0,12), col = "darkslategrey",
axes = F, ann = F)
lines(RootMat[,3] ~ RootMat[,2], lwd = 2, col = "darkslategrey")
lines(RootMat[1786:9001,5] ~ RootMat[1786:9001,2], lwd = 2, col = "darkslategrey")
lines(c(3.982115, RootMat[1786,4]) ~ RootMat[1785:1786,2], lty = 2, lwd = 2, col = "darkslategrey")
lines(c(3.982115, RootMat[1786,5]) ~ RootMat[1785:1786,2], lty = 1, lwd = 2, col = "darkslategrey")
arrows(4.79, 1.8, 4.79, 3.5, length = 0.1, lwd = 2)
text(4.79, 1, "4.79")
axis(1, at = seq(4,6,by=0.5), lwd = 2)
mtext(side = 1, "Per female productivity (r-value)", line = 2.5)
axis(2, at = seq(0,12,by=4), lwd = 2, las = 2)
mtext(side = 2, "Equilibria (Z*)", line = 2.5)
text(4,12,"B)")
legend(4.25,13, lwd = 2, lty = c(1,2), col = "darkslategrey",
c("Stable", "Unstable"), bty = 'n')
plot(StableEq ~ Svec, type = 'l', lwd = 2, xlim = c(0,3000), ylim = c(0,30000),
axes = F, ann = F)
lines(UnstableEq ~ Svec, lty = 2, lwd = 2)
points(0,0, pch = 19, cex = 2)
axis(1, at = seq(0,3000,by = 1000), lwd = 2)
mtext(side = 1, "Susceptible pines", line = 2.5)
axis(2, at = seq(0,30000,by=10000), labels = seq(0,30,by=10), lwd = 2, las = 2)
mtext(side = 2, "Beetles (thousands)", line = 2.5)
text(0,30000, "C)")
lines(Bvec1 ~ Svec1, lwd = 2, col = "blue")
lines(Bvec2 ~ Svec2, lwd = 2, col = "blue")
lines(Bvec3 ~ Svec3, lwd = 2, col = "blue")
lines(Bvec4 ~ Svec4, lwd = 2, col = "blue")
lines(Bvec5 ~ Svec5, lwd = 2, col = "blue")
lines(Bvec6 ~ Svec6, lwd = 2, col = "blue")
lines(Bvec7 ~ Svec7, lwd = 2, col = "blue")
lines(Bvec8 ~ Svec8, lwd = 2, col = "blue")
lines(Bvec9 ~ Svec9, lwd = 2, col = "blue")
lines(StableEq ~ Svec, lty = 1, lwd = 2)
# Now the tedium of adding direction arrows
# First sim
segments(Svec1[2],Bvec1[2],Svec1[2]-50, Bvec1[2]+1500, col = 'red', lwd = 2)
segments(Svec1[2],Bvec1[2],Svec1[2]+50, Bvec1[2]+1500, col = 'red', lwd = 2)
# Second sim
segments(Svec2[10],Bvec2[10],Svec2[10]-30, Bvec2[10]-1200, col = 'red', lwd = 2)
segments(Svec2[10],Bvec2[10],Svec2[10]+60, Bvec2[10]-800, col = 'red', lwd = 2)
# Third sim
segments(Svec3[5],Bvec3[5],Svec3[5]-50, Bvec3[5]+1500, col = 'red', lwd = 2)
segments(Svec3[5],Bvec3[5],Svec3[5]+50, Bvec3[5]+1500, col = 'red', lwd = 2)
# Fourth sim
segments(Svec4[2],Bvec4[2],Svec4[2]-50, Bvec4[2]+1500, col = 'red', lwd = 2)
segments(Svec4[2],Bvec4[2],Svec4[2]+50, Bvec4[2]+1500, col = 'red', lwd = 2)
# Fifth sim
segments(Svec5[8],Bvec5[8],Svec5[8]-30, Bvec5[8]-1200, col = 'red', lwd = 2)
segments(Svec5[8],Bvec5[8],Svec5[8]+60, Bvec5[8]-800, col = 'red', lwd = 2)
# Sixth sim
segments(Svec6[4],Bvec6[4],Svec6[4]-50, Bvec6[4]+1500, col = 'red', lwd = 2)
segments(Svec6[4],Bvec6[4],Svec6[4]+50, Bvec6[4]+1500, col = 'red', lwd = 2)
# Sevent sim
segments(Svec7[3],Bvec7[3],Svec7[3]-50, Bvec7[3]+1500, col = 'red', lwd = 2)
segments(Svec7[3],Bvec7[3],Svec7[3]+50, Bvec7[3]+1500, col = 'red', lwd = 2)
# Eighth sim
segments(Svec8[8],Bvec8[8],Svec8[8]-30, Bvec8[8]-1200, col = 'red', lwd = 2)
segments(Svec8[8],Bvec8[8],Svec8[8]+60, Bvec8[8]-800, col = 'red', lwd = 2)
# Ninth sim
segments(Svec9[4],Bvec9[4],Svec9[4]-50, Bvec9[4]+1500, col = 'red', lwd = 2)
segments(Svec9[4],Bvec9[4],Svec9[4]+50, Bvec9[4]+1500, col = 'red', lwd = 2)
# Along the line
segments(500, 6.498507*500, 500+50, 6.498507*500+1500, col = 'red', lwd = 2)
segments(500, 6.498507*500, 500+80, 6.498507*500-500, col = 'red', lwd = 2)
segments(1500, 6.498507*1500, 1500+50, 6.498507*1500+1500, col = 'red', lwd = 2)
segments(1500, 6.498507*1500, 1500+80, 6.498507*1500-500, col = 'red', lwd = 2)
segments(2500, 6.498507*2500, 2500+50, 6.498507*2500+1500, col = 'red', lwd = 2)
segments(2500, 6.498507*2500, 2500+80, 6.498507*2500-500, col = 'red', lwd = 2)
legend(500,33000, lwd = 2, lty = c(1,2), col = "black",
c("Stable", "Unstable"), bty = 'n')
# Here I make a seperate figure where we fix the MPB productivity level to 5
# and vary the level of aggregation.
# This figure will be a bifurcation plot too.
# We search across the r parameter space (k in the manuscript)
# holding the number of attacks per tree and sex ratio constant
kvec = seq(0.0001,0.1,by = 0.0001)
length(kvec)
# An empty matrix to hold the root estimates
RootMat2 = matrix(rep(0,4*length(kvec)), nrow = length(kvec), ncol = 4)
for(i in 1:length(kvec)){
ObjFunc = function(Rt){
# Defining the parameters
c1 = 5*606*2/3
r = kvec[i]
phi = 5.451709e+02
p = pbeta(q = r/(r + Rt), shape1 = r, shape2 = phi + 1, lower.tail = TRUE, log.p = FALSE)
y = c1*(1 - p)/p - Rt
return(y)
}
Roots = uniroot.all(f = ObjFunc, interval = c(0,400))
RootMat2[i,1] = kvec[i]                # k value
RootMat2[i,2] = Roots[1]               # smallest root
RootMat2[i,3] = Roots[2]               # middle root
RootMat2[i,4] = Roots[3]               # largest root
if(is.na(RootMat2[i,2]) == TRUE) RootMat2[i,2] = 0
if(is.na(RootMat2[i,3]) == TRUE) RootMat2[i,3] = 0
if(is.na(RootMat2[i,4]) == TRUE) RootMat2[i,4] = 0
}
plot(RootMat2[,4] ~ RootMat2[,1], type = 'l', ylim = c(0,500))
lines(RootMat2[,3] ~ RootMat2[,1], lty = 2)
lines(RootMat2[,2] ~ RootMat2[,1], type = 'l')
# We should try to figure out what the model behaviour is at each of these lines
# Determining where the bifurcations occur
which.min(RootMat2[,4] - RootMat2[,3])
RootMat2[46,1]
segments(0.0046,0,0.0046,100, col = 'blue')
# finding the other bifurcation is harder
RootDiff = RootMat2[2:45,3] - RootMat2[1:44,3]
which.max(RootDiff)
RootMat2[21,1]
segments(0.0021,0,0.0021,100, col = 'red')
# These blibs before these vertical lines are not real as is ascertained by the analysis
# below, so in the final plots we will join these lines with the origin at the blue
# vertical line.
Rt = seq(0,10,by = 0.001)
Y1 = Rt
K1 = RmapFunc(Rt, c1 = 5*606*2/3, r = 0.00025, phi = 5.451709e+02)
plot(K1 ~ Rt, type = 'l')
lines(Y1 ~ Rt, lty = 2)
plot(K1 ~ Rt, type = 'l', xlim = c(0,1), ylim = c(0,1))
lines(Y1 ~ Rt, lty = 2)
plot(K1 ~ Rt, type = 'l', xlim = c(0,0.5), ylim = c(0,0.5))
lines(Y1 ~ Rt, lty = 2)
# Now lets look into the second regime
K2 = RmapFunc(Rt, c1 = 5*606*2/3, r = 0.001, phi = 5.451709e+02)
plot(K2 ~ Rt, type = 'l')
lines(Y1 ~ Rt, lty = 2)
# Now lets look into the third regime
K3 = RmapFunc(Rt, c1 = 5*606*2/3, r = 0.002, phi = 5.451709e+02)
plot(K3 ~ Rt, type = 'l')
lines(Y1 ~ Rt, lty = 2)
# So it looks to me like these regimes don't exist and that in fact both equilibrium
# go to zero as k goes to zero.
# Making a prettier plot
graphics.off()
windows(width = 3, height = 3)
par(mar = c(3,3.5,1,1))
plot(RootMat2[47:1000,4] ~ RootMat2[47:1000,1], type = 'l', lwd = 2,
xlim = c(0,0.1), ylim = c(0,300), col = "darkslategrey",
axes = F, ann = F)
lines(RootMat2[47:1000,3] ~ RootMat2[47:1000,1], lty = 2, lwd = 2, col = "darkslategrey")
lines(RootMat2[,2] ~ RootMat2[,1], type = 'l', lwd = 2, col = "darkslategrey")
segments(0,0,RootMat2[47,1],RootMat2[47,4], lty = 1, lwd = 2, col = "darkslategrey")
segments(0,0,RootMat2[47,1],RootMat2[47,3], lty = 2, lwd = 2, col = "darkslategrey")
axis(1, at = seq(0,0.1, by = 0.02), lwd = 2)
mtext(side = 1, "k", line = 2)
axis(2, at = seq(0,300, by = 100), lwd = 2, las = 2)
mtext(side = 2, "Equilibria (Z*)", line = 2.5)
legend(0.001,300, lwd = 2, lty = c(1,2), col = "darkslategrey",
c("Stable", "Unstable"), bty = 'n')
setwd("C:/Users/Devin/Desktop/MPB Dispersal Model")
library(maptools)
library(GISTools)  # Gives me a better north arrow
library(raster)    # Gives a scale bar for projected maps
# We initially read in a raster to get the projection info
#Rast = raster("ABmpb10R1.tif")
#Rast
# Now I use the readShapePoly function from the maptools package to read
# in the data but I specify the proj4string above
Canada = readShapePoly("StatCanProv.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
Alberta = readShapePoly("StatCanABbound.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
MPB05 = readShapePoly("abmpb05poly.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
MPB06 = readShapePoly("abmpb06poly.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
MPB07 = readShapePoly("abmpb07poly.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
MPB08 = readShapePoly("abmpb08poly.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
MPB09 = readShapePoly("abmpb09poly.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
MPB10 = readShapePoly("abmpb10poly.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
StudyArea1 = readShapePoly("TrueValidationArea2Prj.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
InactiveZone = readShapePoly("InactiveZone_Project.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
#######################################################################################
# Now importing the time series data
# Converting it to matrix form
RastertoMatrix = function(x){
R = dim(x)[1]
C = dim(x)[2]
# Making an empty matrix
M = matrix(rep(0,R*C), nrow = R, ncol = C)
for(i in 1:R){
xRow = getValues(x, row = i, nrows = 1)
for(j in 1:C){
if(is.na(xRow[j]) == TRUE) M[i,j] = 0
else(M[i,j] = xRow[j])
}
}
return(M)
}
# First we import infestation data from study area 1
# We import the inactive holding zone (no management area)
Zone1 = raster("TrueValArea2R1.tif")
plot(Zone1)
Zone1
Zone1Mat = RastertoMatrix(Zone1)
library(maptools)
install.packages("maptools")
library(maptools)
library(GISTools)  # Gives me a better north arrow
install.packages(GISTools)
install.packages("GISTools")
setwd("C:/Users/Devin/Desktop/MPB Dispersal Model")
library(maptools)
library(GISTools)  # Gives me a better north arrow
library(raster)    # Gives a scale bar for projected maps
# We initially read in a raster to get the projection info
#Rast = raster("ABmpb10R1.tif")
#Rast
# Now I use the readShapePoly function from the maptools package to read
# in the data but I specify the proj4string above
Canada = readShapePoly("StatCanProv.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
Alberta = readShapePoly("StatCanABbound.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
MPB05 = readShapePoly("abmpb05poly.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
MPB06 = readShapePoly("abmpb06poly.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
MPB07 = readShapePoly("abmpb07poly.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
MPB08 = readShapePoly("abmpb08poly.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
MPB09 = readShapePoly("abmpb09poly.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
MPB10 = readShapePoly("abmpb10poly.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
StudyArea1 = readShapePoly("TrueValidationArea2Prj.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
InactiveZone = readShapePoly("InactiveZone_Project.shp",
proj4string = CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
#######################################################################################
# Now importing the time series data
# Converting it to matrix form
RastertoMatrix = function(x){
R = dim(x)[1]
C = dim(x)[2]
# Making an empty matrix
M = matrix(rep(0,R*C), nrow = R, ncol = C)
for(i in 1:R){
xRow = getValues(x, row = i, nrows = 1)
for(j in 1:C){
if(is.na(xRow[j]) == TRUE) M[i,j] = 0
else(M[i,j] = xRow[j])
}
}
return(M)
}
# First we import infestation data from study area 1
# We import the inactive holding zone (no management area)
Zone1 = raster("TrueValArea2R1.tif")
plot(Zone1)
Zone1
Zone1Mat = RastertoMatrix(Zone1)
# Now I need to import the 2005 data and convert it to a matrix
B05Rast1 = raster("ab5rast31.tif")
B05Mat1 = RastertoMatrix(B05Rast1)
B05Mat1 = B05Mat1*Zone1Mat
# Now I need to import the 2006 data and convert it to a matrix
B06Rast1 = raster("ab6rast31.tif")
B06Mat1 = RastertoMatrix(B06Rast1)
B06Mat1 = B06Mat1*Zone1Mat
# Now I need to import the 2007 data and convert it to a matrix
B07Rast1 = raster("ab7rast31.tif")
B07Mat1 = RastertoMatrix(B07Rast1)
B07Mat1 = B07Mat1*Zone1Mat
# Now I need to import the 2008 data and convert it to a matrix
B08Rast1 = raster("ab8rast31.tif")
B08Mat1 = RastertoMatrix(B08Rast1)
B08Mat1 = B08Mat1*Zone1Mat
# Now I need to import the 2009 data and convert it to a matrix
B09Rast1 = raster("ab9rast31.tif")
B09Mat1 = RastertoMatrix(B09Rast1)
B09Mat1 = B09Mat1*Zone1Mat
# Now I need to import the 2010 data and convert it to a matrix
B10Rast1 = raster("ab10rast31.tif")
B10Mat1 = RastertoMatrix(B10Rast1)
B10Mat1 = B10Mat1*Zone1Mat
# Computing the total number of infested stems in study area two per year
sum(B05Mat1) # 10
sum(B06Mat1) # 202
sum(B07Mat1) # 29725
sum(B08Mat1) # 6439
sum(B09Mat1) # 7809
sum(B10Mat1) # 0
PopVec1 = c(10, 202, 29725, 6439, 7809, 0, 0)
times = 2004:2010
##############################################################################
# Making the graphic
graphics.off()
windows(width = 6, height = 3)
layout(matrix(c(2,1), nrow = 1, ncol = 2, byrow = TRUE),
widths = c(1,1), heights = c(1))
layout.show(n = 2)
par(mar = c(3,4,0.5,1))
# Plotting the second panel (labeled 1), which is the time series
plot(PopVec1 ~ times, type = 'n', ann = F, axes = F, ylim = c(-1000,30500))
xx = seq(2005.9, 2009.1, by = 0.1)
xx1 = c(xx, xx[33:1])
yy1 = c(rep(-1000,33), rep(30500,33))
polygon(xx1, yy1, col = "lightgrey", border = NA)
text(2007.6, 29500, "No management", cex = 0.7)
text(2007.6, 28000, "window", cex = 0.7)
points(PopVec1 ~ times, type = 'b', pch = 21, bg = "white")
axis(1, at = seq(2004,2010, by = 2), lwd = 2)
mtext(side = 1, "Year of attack", line = 2)
axis(2, at = seq(0, 30000, by = 5000), las = 2, lwd = 2)
mtext(side = 2, "Infested stem count", line = 3.5)
text(2004.2, 30000, "B)")
# Now plotting the first panel (labeled 2), which is the map of the study area
par(mar = c(0.5,0,0.5,0.5))
plot(Canada, col="white", xlim=c(-120,-117), ylim=c(52,55))
text(-120.8, 55, "A)")
plot(MPB05, add = TRUE, col = "grey", border = FALSE)
plot(MPB06, add = TRUE, col = "grey", border = FALSE)
plot(MPB07, add = TRUE, col = "grey", border = FALSE)
plot(MPB08, add = TRUE, col = "grey", border = FALSE)
plot(MPB09, add = TRUE, col = "grey", border = FALSE)
plot(MPB10, add = TRUE, col = "grey", border = FALSE)
north.arrow(xb=-116.5, yb=54.5, len=0.1, lab="N", cex.lab = 1, col = 'black')
plot(Alberta, add = TRUE, col = NA, lwd = 2)
plot(StudyArea1, add = TRUE, border = "black",
col = adjustcolor(col = c("red"), alpha.f = 0.3))
plot(InactiveZone, add = TRUE, lwd = 2, lty = 2, border = "black")
legend(-118.65, 53.4, lty = 2, lwd = 2, c("Willmore Park"),
bty = 'n', cex = 0.7)
legend(-118.4, 53.2, fill = adjustcolor(col = c("red"), alpha.f = 0.3),
c("Study area"), bty = 'n', cex = 0.7)
legend(-118.4, 53, fill = c("grey"), c("MPB extent by 2010"),
bty = 'n', cex = 0.7)
scalebar(40, xy = c(-118.6, 52), type = "bar", divs = 2, below = "km",
lonlat = TRUE, label = c(0,20,40), adj=c(0.1, -1.5),
cex = 0.5, lwd = 2)
# We want to put an insert in the upper right hand corner
# calculate position of inset
u <- par("usr")
v <- c(
grconvertX(u[1:2], "user", "ndc"),
grconvertY(u[3:4], "user", "ndc")
)
vnew <- c(v[1], (v[2]-v[1])/2.2, v[3], (v[4] - v[3])/2.2)
par( fig=vnew, new=TRUE, mar=c(0,0,0,0) )
plot(Canada, col="grey")
plot(Alberta, add = TRUE, col="black")
xx = seq(2005.9, 2010.1, by = 0.1)
length(xx)
# Making the graphic
graphics.off()
windows(width = 6, height = 3)
layout(matrix(c(2,1), nrow = 1, ncol = 2, byrow = TRUE),
widths = c(1,1), heights = c(1))
layout.show(n = 2)
par(mar = c(3,4,0.5,1))
# Plotting the second panel (labeled 1), which is the time series
plot(PopVec1 ~ times, type = 'n', ann = F, axes = F, ylim = c(-1000,30500))
xx = seq(2005.9, 2010.1, by = 0.1)
xx1 = c(xx, xx[33:1])
yy1 = c(rep(-1000,43), rep(30500,43))
polygon(xx1, yy1, col = "lightgrey", border = NA)
text(2007.6, 29500, "No management", cex = 0.7)
text(2007.6, 28000, "window", cex = 0.7)
points(PopVec1 ~ times, type = 'b', pch = 21, bg = "white")
axis(1, at = seq(2004,2010, by = 2), lwd = 2)
mtext(side = 1, "Year of attack", line = 2)
axis(2, at = seq(0, 30000, by = 5000), las = 2, lwd = 2)
mtext(side = 2, "Infested stem count", line = 3.5)
text(2004.2, 30000, "B)")
# Now plotting the first panel (labeled 2), which is the map of the study area
par(mar = c(0.5,0,0.5,0.5))
plot(Canada, col="white", xlim=c(-120,-117), ylim=c(52,55))
text(-120.8, 55, "A)")
plot(MPB05, add = TRUE, col = "grey", border = FALSE)
plot(MPB06, add = TRUE, col = "grey", border = FALSE)
plot(MPB07, add = TRUE, col = "grey", border = FALSE)
plot(MPB08, add = TRUE, col = "grey", border = FALSE)
plot(MPB09, add = TRUE, col = "grey", border = FALSE)
plot(MPB10, add = TRUE, col = "grey", border = FALSE)
north.arrow(xb=-116.5, yb=54.5, len=0.1, lab="N", cex.lab = 1, col = 'black')
plot(Alberta, add = TRUE, col = NA, lwd = 2)
plot(StudyArea1, add = TRUE, border = "black",
col = adjustcolor(col = c("red"), alpha.f = 0.3))
plot(InactiveZone, add = TRUE, lwd = 2, lty = 2, border = "black")
legend(-118.65, 53.4, lty = 2, lwd = 2, c("Willmore Park"),
bty = 'n', cex = 0.7)
legend(-118.4, 53.2, fill = adjustcolor(col = c("red"), alpha.f = 0.3),
c("Study area"), bty = 'n', cex = 0.7)
legend(-118.4, 53, fill = c("grey"), c("MPB extent by 2010"),
bty = 'n', cex = 0.7)
scalebar(40, xy = c(-118.6, 52), type = "bar", divs = 2, below = "km",
lonlat = TRUE, label = c(0,20,40), adj=c(0.1, -1.5),
cex = 0.5, lwd = 2)
# We want to put an insert in the upper right hand corner
# calculate position of inset
u <- par("usr")
v <- c(
grconvertX(u[1:2], "user", "ndc"),
grconvertY(u[3:4], "user", "ndc")
)
vnew <- c(v[1], (v[2]-v[1])/2.2, v[3], (v[4] - v[3])/2.2)
par( fig=vnew, new=TRUE, mar=c(0,0,0,0) )
plot(Canada, col="grey")
plot(Alberta, add = TRUE, col="black")
# Making the graphic
graphics.off()
windows(width = 6, height = 3)
layout(matrix(c(2,1), nrow = 1, ncol = 2, byrow = TRUE),
widths = c(1,1), heights = c(1))
layout.show(n = 2)
par(mar = c(3,4,0.5,1))
# Plotting the second panel (labeled 1), which is the time series
plot(PopVec1 ~ times, type = 'n', ann = F, axes = F, ylim = c(-1000,30500))
xx = seq(2005.9, 2010.1, by = 0.1)
xx1 = c(xx, xx[43:1])
yy1 = c(rep(-1000,43), rep(30500,43))
polygon(xx1, yy1, col = "lightgrey", border = NA)
text(2007.6, 29500, "No management", cex = 0.7)
text(2007.6, 28000, "window", cex = 0.7)
points(PopVec1 ~ times, type = 'b', pch = 21, bg = "white")
axis(1, at = seq(2004,2010, by = 2), lwd = 2)
mtext(side = 1, "Year of attack", line = 2)
axis(2, at = seq(0, 30000, by = 5000), las = 2, lwd = 2)
mtext(side = 2, "Infested stem count", line = 3.5)
text(2004.2, 30000, "B)")
# Now plotting the first panel (labeled 2), which is the map of the study area
par(mar = c(0.5,0,0.5,0.5))
plot(Canada, col="white", xlim=c(-120,-117), ylim=c(52,55))
text(-120.8, 55, "A)")
plot(MPB05, add = TRUE, col = "grey", border = FALSE)
plot(MPB06, add = TRUE, col = "grey", border = FALSE)
plot(MPB07, add = TRUE, col = "grey", border = FALSE)
plot(MPB08, add = TRUE, col = "grey", border = FALSE)
plot(MPB09, add = TRUE, col = "grey", border = FALSE)
plot(MPB10, add = TRUE, col = "grey", border = FALSE)
north.arrow(xb=-116.5, yb=54.5, len=0.1, lab="N", cex.lab = 1, col = 'black')
plot(Alberta, add = TRUE, col = NA, lwd = 2)
plot(StudyArea1, add = TRUE, border = "black",
col = adjustcolor(col = c("red"), alpha.f = 0.3))
plot(InactiveZone, add = TRUE, lwd = 2, lty = 2, border = "black")
legend(-118.65, 53.4, lty = 2, lwd = 2, c("Willmore Park"),
bty = 'n', cex = 0.7)
legend(-118.4, 53.2, fill = adjustcolor(col = c("red"), alpha.f = 0.3),
c("Study area"), bty = 'n', cex = 0.7)
legend(-118.4, 53, fill = c("grey"), c("MPB extent by 2010"),
bty = 'n', cex = 0.7)
scalebar(40, xy = c(-118.6, 52), type = "bar", divs = 2, below = "km",
lonlat = TRUE, label = c(0,20,40), adj=c(0.1, -1.5),
cex = 0.5, lwd = 2)
# We want to put an insert in the upper right hand corner
# calculate position of inset
u <- par("usr")
v <- c(
grconvertX(u[1:2], "user", "ndc"),
grconvertY(u[3:4], "user", "ndc")
)
vnew <- c(v[1], (v[2]-v[1])/2.2, v[3], (v[4] - v[3])/2.2)
par( fig=vnew, new=TRUE, mar=c(0,0,0,0) )
plot(Canada, col="grey")
plot(Alberta, add = TRUE, col="black")
